var searchIndex = {};
searchIndex["anion"] = {"doc":"","items":[[4,"AnionValue","anion","Enum of all possible types of elements in an ion document.",null,null],[13,"Null","","Pure null type",0,null],[13,"Boolean","","true, false, null.bool",0,null],[13,"Integer","","Bigint values (unlimited)",0,null],[13,"Float","","64 bit floating point value",0,null],[13,"Decimal","","Exact precision real number value",0,null],[13,"Timestamp","","Timestamp object",0,null],[13,"Str","","String of utf8 characters",0,null],[13,"Symbol","","String of unicode characters - can be used as struct keys and in s-expressions",0,null],[13,"Blob","","Raw binary data (base64 encoded)",0,null],[13,"List","","List of AnionValues",0,null],[13,"Struct","","Map of symbols to Arbitrary AnionValues",0,null],[4,"NonNullAnionValue","","Variant of AnionValue enum that does not permit null values. This includes the 'pure NULL' null value, though this may be removed due to naming sillyness. This is much closer in type to true JSON values.",null,null],[13,"Null","","The NULL value - in the NonNullValue!",1,null],[13,"Boolean","","true, false",1,null],[13,"Integer","","Bigint values (unlimited)",1,null],[13,"Float","","64 bit floating point value",1,null],[13,"Decimal","","Exact precision real number value",1,null],[13,"Timestamp","","Timestamp object",1,null],[13,"Str","","String of unicode characters",1,null],[13,"Symbol","","String of unicode characters - may be used for keys",1,null],[13,"Blob","","Raw binary data (base64 encoded)",1,null],[13,"List","","List of AnionValues",1,null],[13,"Struct","","Map of symbols to Arbitrary AnionValues",1,null],[4,"Error","","\"Master\" Error type enumerating all possible failures when dealing with anion types.",null,null],[13,"ParseError","","Generic parsing error",2,null],[13,"IntError","","Error while parsing an integer",2,null],[13,"UnexpectedCharacter","","General parsing error",2,null],[13,"UnexpectedNull","","Raised when a null value is found where there shouldn't be (eg NonNullAnionValue)",2,null],[13,"Io","","IO-specific error",2,null],[5,"from","","Return equivalent AnionValue from some object. Convenience for `AnionValue::from(..)`.",null,{"inputs":[{"name":"t"}],"output":{"name":"anionvalue"}}],[5,"parse","","Parse a string and try to create an AnionValue. Convenience method for `str::parse::<AnionValue>(..)`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"anionvalue"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"anionvalue"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"anionvalue"}}],[11,"into_nonnull","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"nonnullanionvalue"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"nonnullanionvalue"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"nonnullanionvalue"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"aniontimestamp"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"aniontimestamp"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"anionint"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"anionint"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"anionfloat"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"anionfloat"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"bigdecimal"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"aniondecimal"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"aniondecimal"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"bool"}],"output":{"name":"anionvalue"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"anionbool"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"anionbool"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"anionblob"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"anionblob"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"anionstring"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"anionstring"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"anionsymbol"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"anionsymbol"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"anionlist"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"anionlist"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"anionstruct"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"anionstruct"}],"output":{"name":"self"}}],[0,"parser","","",null,null],[3,"ParseError","anion::parser","",null,null],[12,"line","","",3,null],[12,"column","","",3,null],[12,"offset","","",3,null],[12,"expected","","",3,null],[5,"parse_string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"parse","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_nonnull","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[6,"AnionBool","anion","Simple boolean value - mapped directly to rust's *bool*",null,null],[6,"AnionFloat","","64-bit floating point number",null,null],[6,"AnionInt","","Unbounded integer",null,null],[6,"AnionDecimal","","Exact decimal",null,null],[6,"AnionString","","Unicode characters",null,null],[6,"AnionSymbol","","Unicode characters - may be used for keys and symbols (not values)",null,null],[6,"AnionList","","List of AnionValue items",null,null],[6,"AnionStruct","","Map of symbols to arbitrary AnionValues",null,null],[6,"AnionTimestamp","","point in time",null,null],[6,"AnionBlob","","Raw binary data",null,null],[6,"Result","","Result wrapping all possible errors in this crate",null,null],[14,"ion_list","","Macro to easily build an <a class=\"type\" href=\"type.AnionList.html\">AnionList</a>; similiar to `vec![]`",null,null]],"paths":[[4,"AnionValue"],[4,"NonNullAnionValue"],[4,"Error"],[3,"ParseError"]]};
initSearch(searchIndex);
